import sqlite3
from pathlib import Path


class Database:
    def __init__(self, name):
        self.name = name
        self.db = '_hh-trudvsem_.db'
        if name == 'hh':
            self.command_create = (
                'CREATE TABLE headhunter (company text, name text, '
                'from_salary text, to_salary text, link text, types text,'
                ' date text, schedule text, counters_responses text, '
                'address text)'
            )
            self.command_drop = "DROP TABLE IF EXISTS headhunter"
            self.command_read = 'SELECT * FROM headhunter'
        else:
            self.command_create = (
                'CREATE TABLE trudvsem (company text, name text, '
                'from_salary text, to_salary text, link text, date text, '
                'schedule text, address text)'
            )
            self.command_drop = "DROP TABLE IF EXISTS trudvsem"
            self.command_read = "SELECT * FROM trudvsem"

    def command_database(self, command_sql: str) -> None:
        """
        –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã.
        :param command_sql: str
        :return: None
        """
        connect = sqlite3.connect(self.db, check_same_thread=False)
        cursor = connect.cursor()
        cursor.execute(command_sql)
        connect.commit()
        connect.close()

    def drop_database(self) -> None:
        """
        –£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã.
        :return: None
        """
        if Path.exists(Path(self.db)):
            try:
                self.command_database(self.command_drop)
            except Exception as e:
                print(e)
            self.command_database(self.command_create)

    def initialize_database(self) -> None:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –µ–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏.
        :return: None
        """
        if not Path.exists(Path(self.db)):
            # print('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞')
            self.command_database(self.command_create)

    def insert_hh(self, company: str, name: str, from_salary: str,
                  to_salary: str, link: str, types: str, date: str,
                  schedule: str, counters_responses: str, address: str):
        """
        –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
        :param company: str
        :param name: str
        :param from_salary: str
        :param to_salary: str
        :param link: str
        :param types: str
        :param date: str
        :param schedule: str
        :param counters_responses: str
        :param address: str
        :return: None
        """
        command_insert = (f"INSERT INTO headhunter (company, name, from_salary,"
                          f" to_salary, link, types, date, schedule, "
                          f"counters_responses, address) VALUES ('{company}',"
                          f" '{name}', '{from_salary}', '{to_salary}', "
                          f"'{link}', '{types}', '{date}',' {schedule}', "
                          f"'{counters_responses}', '{address}')")
        self.command_database(command_insert)

    def insert_trudvsem(self, company: str, name: str, from_salary: str,
                        to_salary: str, link: str, date, schedule: str,
                        address: str) -> None:
        """
        –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
        :param company: str
        :param name: str
        :param from_salary: str
        :param to_salary: str
        :param link: str
        :param date: text
        :param schedule: str
        :param address: str
        :return: None
        """
        command_insert = (f"INSERT INTO trudvsem (company, name, from_salary, "
                          f"to_salary, link, date, schedule, address) "
                          f"VALUES ('{company}', '{name}', '{from_salary}', "
                          f"'{to_salary}', '{link}', '{date}',' {schedule}', "
                          f"'{address}')")
        self.command_database(command_insert)

    def read_db(self) -> str:
        """
        –ü–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö —Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        :return: str
        """
        try:
            connect = sqlite3.connect(self.db, check_same_thread=False)
            cursor = connect.cursor()
            data = cursor.execute(self.command_read)
            for variable in data:
                if self.name == 'hh':
                    yield (f'  {variable[0]}  '.center(107, '*') + f'\n\nüöÆ   '
                           f'–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {variable[1]}\nüòç   –ó–∞—Ä–ø–ª–∞—Ç–∞: '
                           f'{variable[2]} - {variable[3]}\n‚öú   –°—Å—ã–ª–∫–∞: '
                           f'{variable[4]}\nüêØ   /{variable[5]}/   -üåº-   –¥–∞—Ç–∞ '
                           f'–ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {variable[6]}   -üåª-   –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã: '
                           f'{variable[7]}\nüö¶   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫–ª–∏–∫–æ–≤ –¥–ª—è '
                           f'–≤–∞–∫–∞–Ω—Å–∏–∏: {variable[8]}\nüöò   –ê–¥—Ä–µ—Å: '
                           f'{variable[9]}\n')
                else:
                    yield (f'  {variable[0]}  '.center(107, '*') + f'\n\nüöÆ   '
                           f'–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {variable[1]}\nüòç    –ó–∞—Ä–ø–ª–∞—Ç–∞: '
                           f'{variable[2]} - {variable[3]}\n‚öú   –°—Å—ã–ª–∫–∞: '
                           f'{variable[4]}\nüêØ   –¥–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {variable[5]}'
                           f'   -üåª-   –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã: {variable[6]}\nüöò   '
                           f'–ê–¥—Ä–µ—Å: {variable[7]}\n')
        except Exception as e:
            if str(e).find('no such table') != -1:
                yield '\n\n' + '  –ù–µ –±—ã–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π –≤ –±–∞–∑—É  '.center(107, '*')
            pass
